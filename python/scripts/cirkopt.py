#!/usr/bin/env python3

import sys
import os.path

PYTHON_SCRIPTS_DIRECTORY: str = os.path.dirname(os.path.abspath(__file__))
PYTHON_DIRECTORY: str = os.path.abspath(os.path.join(PYTHON_SCRIPTS_DIRECTORY, ".."))
sys.path.append(PYTHON_DIRECTORY)

import argparse
from scripts.single_param_sweep import main as sweep_param

CIRKOPT_SHORT_DESCRIPTION: str = "SPICE circuit optimizer"
CIRKOPT_USAGE: str = """
cirkopt <command> [<args>]

The most commonly used commands are:
   explore     Generate plots showing search space
   search      Find an optimal design
"""

# Basically a copy of this blog post [1].
# [1]: https://chase-seibert.github.io/blog/2014/03/21/python-multilevel-argparse.html
class Cirkopt(object):
    def __init__(self):
        parser = argparse.ArgumentParser(
            description=CIRKOPT_SHORT_DESCRIPTION,
            usage=CIRKOPT_USAGE,
        )
        parser.add_argument("command", help="Sub command to run")
        # parse_args defaults to [1:] for args, but you need to
        # exclude the rest of the args too, or validation will fail
        args = parser.parse_args(sys.argv[1:2])
        if not hasattr(self, args.command):
            print("Unrecognized command")
            parser.print_help()
            exit(1)
        # use dispatch pattern to invoke method with same name
        getattr(self, args.command)()

    def explore(self):
        parser = argparse.ArgumentParser(
            description="Generate plots showing search space",
        )
        # prefixing the argument with -- means it's optional
        parser.add_argument(
            "--param",
            help="Paramater to sweep, e.g.: width",
            default="width",
        )
        parser.add_argument(
            "--outpin",
            help="Name of pin to get data from, e.g.: Y",
            default="Y",
        )
        parser.add_argument(
            "--outdir",
            help="Directory to place results in, e.g. graphs. Does not include generated netlists or LDB library.",
            default="../out",
        )
        parser.add_argument(
            "--workdir",
            help="Directory to place generated netlists. Must match settings in Liberate configeration files. ",
            default="../../liberate/netlist_wrk",
        )
        parser.add_argument(
            "--netlist",
            help="Path to reference netlist to modify. Must match settings in Liberate configeration file.",
            default="../../liberate/netlist_ref/INVX1.sp",
        )
        parser.add_argument(
            "--ldb",
            help="Path to LDB library generated by Liberate. Must match settings in Liberate configeration files.",
            default="../../liberate/netlist_ref/INVX1.sp",
        )

        # now that we're inside a subcommand, ignore the first
        # TWO argvs, ie the command (cirkopt) and the subcommand (explore)
        args = parser.parse_args(sys.argv[2:])
        print(f"Exploring search space.")
        sweep_param(
            sim_result_rel_path=args.ldb,
            reference_netlist_rel_path=args.netlist,
            netlist_work_dir_rel_path=args.workdir,
            param=Param.WIDTH,
            values=[i * 100e-9 for i in range(2, 11)],
            graph_pin=args.outpin,
            graph_delay_index=(0, 1),
            out_dir_rel_path=args.outdir,
        )

    def search(self):
        parser = argparse.ArgumentParser(
            description="Find an optimal design",
        )
        # Add arguments here:

        raise NotImplementedError

        # Parse arguments
        args = parser.parse_args(sys.argv[2:])


if __name__ == "__main__":
    Cirkopt()
